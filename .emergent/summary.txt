<analysis>
L'ingénieur précédent a construit une application complète de gestion de location de véhicules (initialement AutoPro Rental, renommée Abetoile Location) en utilisant React, FastAPI et MongoDB. Le travail a progressé de la définition des exigences initiales à l'implémentation de fonctionnalités clés telles que l'authentification JWT, la gestion CRUD des clients et véhicules, un système de commande avec renouvellement automatique, la facturation (génération de PDF via l'API Emergent LLM et GPT-4o-mini), et un système de comptabilité conforme aux normes françaises. Chaque phase a été validée par des captures d'écran et des tests approfondis avec un agent de test.

La phase la plus récente et la plus complexe a été la création de scripts de déploiement automatique pour un serveur Linux multi-sites (Ubuntu 25.04). Cela a impliqué de nombreux ajustements itératifs pour résoudre des problèmes comme l'accessibilité du dépôt GitHub, des erreurs de PPA Python () et des dépendances Python obsolètes (, ). L'ingénieur a fait preuve d'une grande persévérance et de compétences en débogage pour adapter les scripts (, , , ) afin de garantir la compatibilité et la robustesse sur des environnements serveur récents et multi-sites. Le travail s'est arrêté alors que l'utilisateur demandait de comparer un script d'installation existant et de clarifier la communication sur les projets.
</analysis>

<product_requirements>
L'application demandée est un système de gestion pour une société de location de voitures/services, baptisée Abetoile Location.
**Problème à résoudre :** Automatiser la gestion des clients, des commandes, de la facturation, des paiements et de la comptabilité pour une entreprise de location.
**Fonctionnalités implémentées :**
*   **Gestion des Clients :** Enregistrement des clients avec taux de TVA, numéro de TVA intracommunautaire, numéro RCS (validation prévue via INSEE/Infogreffe), et possibilité de télécharger permis de conduire/pièce d'identité (photos/PDF).
*   **Gestion des Commandes :** Saisie d'un ou plusieurs produits (véhicules) par client, indication de locations reconductibles (avec durée en jours, semaines, mois, années), génération automatique de factures PDF en fin de commande.
*   **Facturation et Règlements :** Reconduction automatique des locations si la dernière facture est réglée, création automatique de nouvelles commandes/factures envoyées par email. Alertes des factures en retard dès l'ouverture de l'application (délai configurable). Envoi automatique d'emails de relance personnalisables (HTML, PDF joint) pour les factures impayées.
*   **Comptabilité :** Chaque produit peut avoir un compte comptable de vente personnalisable. Génération d'écritures comptables de type grand livre conformes aux normes françaises. Export des écritures comptables aux formats CIEL, SAGE, CEGID. Chaque taux de TVA a un code comptable personnalisé.
*   **Gestion des Produits/Véhicules :** Suivi détaillé des véhicules (type, marque, modèle, immatriculation, date de fin de contrôle technique, date de première mise en circulation), informations d'assurance (compagnie, numéro, montant), fichiers PDF/image de la carte grise, et pièces jointes diverses.
*   **Authentification :** Système d'authentification simple basé sur JWT (nom d'utilisateur/mot de passe).
*   **Intégrations :** Génération PDF avec IA (GPT-4o-mini via Emergent LLM Key). Mailgun pour l'envoi d'emails (clé à configurer ultérieurement).
</product_requirements>

<key_technical_concepts>
-   **Full-stack :** FastAPI (backend), React (frontend), MongoDB (base de données).
-   **Authentification :** JWT.
-   **UI/UX :** Shadcn UI, Tailwind CSS.
-   **PDF :**  (Python), Emergent LLM Key (GPT-4o-mini pour le contenu).
-   **Déploiement :** Linux (Ubuntu 25.04), , , , 
Usage:   
  pip <command> [options]

Commands:
  install                     Install packages.
  lock                        Generate a lock file.
  download                    Download packages.
  uninstall                   Uninstall packages.
  freeze                      Output installed packages in requirements format.
  inspect                     Inspect the python environment.
  list                        List installed packages.
  show                        Show information about installed packages.
  check                       Verify installed packages have compatible dependencies.
  config                      Manage local and global configuration.
  search                      Search PyPI for packages.
  cache                       Inspect and manage pip's wheel cache.
  index                       Inspect information available from package indexes.
  wheel                       Build wheels from your requirements.
  hash                        Compute hashes of package archives.
  completion                  A helper command used for command completion.
  debug                       Show information useful for debugging.
  help                        Show help for commands.

General Options:
  -h, --help                  Show help.
  --debug                     Let unhandled exceptions propagate outside the
                              main subroutine, instead of logging them to
                              stderr.
  --isolated                  Run pip in an isolated mode, ignoring
                              environment variables and user configuration.
  --require-virtualenv        Allow pip to only run in a virtual environment;
                              exit with an error otherwise.
  --python <python>           Run pip with the specified Python interpreter.
  -v, --verbose               Give more output. Option is additive, and can be
                              used up to 3 times.
  -V, --version               Show version and exit.
  -q, --quiet                 Give less output. Option is additive, and can be
                              used up to 3 times (corresponding to WARNING,
                              ERROR, and CRITICAL logging levels).
  --log <path>                Path to a verbose appending log.
  --no-input                  Disable prompting for input.
  --keyring-provider <keyring_provider>
                              Enable the credential lookup via the keyring
                              library if user input is allowed. Specify which
                              mechanism to use [auto, disabled, import,
                              subprocess]. (default: auto)
  --proxy <proxy>             Specify a proxy in the form
                              scheme://[user:passwd@]proxy.server:port.
  --retries <retries>         Maximum attempts to establish a new HTTP
                              connection. (default: 5)
  --timeout <sec>             Set the socket timeout (default 15 seconds).
  --exists-action <action>    Default action when a path already exists:
                              (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort.
  --trusted-host <hostname>   Mark this host or host:port pair as trusted,
                              even though it does not have valid or any HTTPS.
  --cert <path>               Path to PEM-encoded CA certificate bundle. If
                              provided, overrides the default. See 'SSL
                              Certificate Verification' in pip documentation
                              for more information.
  --client-cert <path>        Path to SSL client certificate, a single file
                              containing the private key and the certificate
                              in PEM format.
  --cache-dir <dir>           Store the cache data in <dir>.
  --no-cache-dir              Disable the cache.
  --disable-pip-version-check
                              Don't periodically check PyPI to determine
                              whether a new version of pip is available for
                              download. Implied with --no-index.
  --no-color                  Suppress colored output.
  --use-feature <feature>     Enable new functionality, that may be backward
                              incompatible.
  --use-deprecated <feature>  Enable deprecated functionality, that will be
                              removed in the future.
  --resume-retries <resume_retries>
                              Maximum attempts to resume or restart an
                              incomplete download. (default: 5), yarn install v1.22.22
info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command..
-   **Scripts :** Bash pour l'installation et le déploiement.
</key_technical_concepts>

<code_architecture>
Le projet est structuré en deux applications principales,  (FastAPI) et  (React), avec des scripts d'installation et de déploiement à la racine.



**Fichiers clés :**
-   ** :** Cœur de l'API FastAPI. Il gère l'authentification JWT, les opérations CRUD pour clients, véhicules, commandes et factures. Il a été étendu pour intégrer la logique de  et , ajoutant des routes pour la génération de PDF et la gestion comptable.
-   ** :** Nouveau fichier. Il contient la logique de création de PDF, utilisant la bibliothèque  et générant dynamiquement le contenu des factures (messages de remerciement, conditions de paiement) via l'Emergent LLM Key (GPT-4o-mini).
-   ** :** Nouveau fichier. Il implémente la logique comptable française (PCG), génère des écritures pour factures/règlements et permet l'exportation vers CSV, CIEL, SAGE, CEGID.
-   ** :** Composant React principal. Il définit la structure de l'application et gère le routage vers les différentes pages (login, register, clients, véhicules, commandes, factures, tableau de bord comptable, paramètres). Le branding a été mis à jour à Abetoile Location.
-   ** :** Ce composant affiche la liste des factures et a été mis à jour pour inclure un bouton Générer PDF qui interagit avec le backend.
-   ** :** Nouveau composant React pour afficher un résumé comptable et les options d'exportation.
-   ** :** Le script d'installation le plus récent. Il est conçu pour installer automatiquement les prérequis système (Python, Node.js/Yarn, MongoDB, Nginx, UFW) sur un serveur Linux Ubuntu 25.04 multi-sites, en évitant les problèmes de PPA et de packages Python obsolètes.
-   ** :** Un script dédié pour supprimer les configurations résiduelles de PPA deadsnakes qui causaient des erreurs.
-   ** :** Un script pour déployer l'application après l'installation des prérequis, gérant l'installation des dépendances frontend/backend et la construction de l'application React.
</code_architecture>

<pending_tasks>
-   Intégrer la clé Mailgun pour l'envoi automatique des factures et des emails de relance.
-   Intégrer l'API INSEE/Infogreffe pour la validation et le remplissage automatique des données des clients via le numéro RCS.
-   Comparer le script  avec  (fourni par l'utilisateur) et y incorporer des instructions plus pertinentes.
-   Clarifier la méthode de communication des noms de projets pour les modifications futures.
</pending_tasks>

<current_work>
L'ingénieur précédent a achevé la construction fonctionnelle de l'application Abetoile Location Management et a récemment terminé l'intégration de la génération de PDF (via Emergent LLM Key et GPT-4o-mini) et d'un système de comptabilité français complet. Toutes les pages de l'application et les endpoints API sont testés et fonctionnels.

Le travail en cours s'est concentré sur la résolution des problèmes de déploiement signalés par l'utilisateur sur son serveur Linux Ubuntu 25.04 multi-sites. Cela a impliqué un processus itératif de débogage et de réécriture des scripts d'installation. Plusieurs versions ont été créées (, , , ) pour contourner les erreurs liées aux dépôts PPA () et aux packages Python obsolètes (, ) qui ne sont plus disponibles sur les versions récentes d'Ubuntu. Le dernier script fourni est , qui est censé être 100% compatible. L'ingénieur a également créé un script  pour s'assurer que les configurations APT problématiques soient supprimées avant l'installation.

Immédiatement avant ce résumé, l'utilisateur a signalé une erreur concernant  et a demandé de comparer le dernier script () avec un autre script () qu'il possède et qui fonctionne, ainsi que des conseils sur la communication des noms de projets. L'ingénieur précédent a reconnu la demande mais a indiqué des limitations techniques pour accéder à des fichiers externes.
</current_work>

<optional_next_step>
Je guiderai l'utilisateur pour qu'il me fournisse le contenu du script  afin que je puisse le comparer et intégrer les instructions pertinentes dans , et je préciserai la meilleure façon de communiquer les noms de projets.
</optional_next_step>
